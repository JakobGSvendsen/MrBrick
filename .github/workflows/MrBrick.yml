# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v23
      - name: Send Command
        run: |
          $iotConnString  = "${{secrets.IOTCONNECTIONSTRING}}"
          $deviceId = "MrBrick"

          #${{ steps.changed-files.outputs.all_changed_files }} | Get-Content
          $content = Get-Content .\Examples\AzureIoTDemo2022\Samples\1.yaml

          $commands = @{}
          foreach($line in $content){
              $cmd  = $line.Replace(" ","").split(":")[0]
              $value = $line.Replace(" ","").split(":")[1]
              switch($cmd){
                  "left" {
                      $commands += @{
                          leftSpeed     = $Speed * 10 # 100% speed
                          leftDuration  = $value 
                      }
            
                  }
                  "right" {
                      $commands += @{
                          rightSpeed    = $RightSpeed * 10
                          rightDuration = $value
                        
                      }
                  }

                  
              }
          }
          $messageString = $commands | convertto-json
          Import-Module ".\.github\workflows\dll\Microsoft.Azure.Devices.dll" -Verbose
          $cloudClient = [Microsoft.Azure.Devices.ServiceClient]::CreateFromConnectionString($iotConnString)
          $messagetosend = [Microsoft.Azure.Devices.Message]([Text.Encoding]::ASCII.GetBytes($messageString))
          $cloudClient.SendAsync($deviceId, $messagetosend)
        shell: powershell
